import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

def prefix = "http://axiomatics.com/alfa/identifier/"

def myErrOut = new ByteArrayOutputStream();

repositories {
    mavenCentral()
    maven {
        url "s3://axiomatics-cr-maven/snapshot"
        credentials(AwsCredentials) {
            accessKey = System.env.AXIOMATICS_ACCESS_KEY_ID ?: project.findProperty('AXIOMATICS_ACCESS_KEY_ID')
            secretKey = System.env.AXIOMATICS_SECRET_ACCESS_KEY ?: project.findProperty('AXIOMATICS_SECRET_ACCESS_KEY')
        }
    }
    //mavenLocal()
}


configurations {
    domTool
    alfac
    pip
    testImplementation.extendsFrom(pip)
    ads.extendsFrom(pip)
}

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.13+'
    testImplementation "com.axiomatics.cr.alfa.test:alfa-test-framework:1.0.3-SNAPSHOT"

    domTool(group: 'com.axiomatics.domtool', name: 'domtool', version: '0.5')
    domTool(group: 'com.axiomatics.domtool', name: 'domtool-lib', version: '0.5')

    ads "com.axiomatics.access-decision-service:access-decision-service:1.8.0"

    pip 'com.axiomatics.cr.pip:constant-pip:2022.01.20'
    pip (group: 'com.axiomatics.cr.pip', name: 'http-pip', version: '2022.01.21-SNAPSHOT')
    pip (group: 'com.axiomatics.cr.pip', name: 'parser-pip', version: '2022.01.21-SNAPSHOT')

    alfac group: 'com.axiomatics.alfa', name: 'alfac', version: '1.3.0-SNAPSHOT'
}

task compileAlfa(type: JavaExec) {
    outputs.files fileTree("${buildDir}/alfa/domain/xacmlSpecifications")
    doFirst {
        project.delete( fileTree("${buildDir}/alfa/domain/xacmlSpecifications/"))
        def inputDir = inputs.properties.srcDir
        if (!new File(inputDir).isDirectory()) {
            throw new GradleException("alfa.srcDir is not set or does not exist: ${inputDir}")
        }
        myErrOut = new MyLogger();
        errorOutput myErrOut
        workingDir inputDir
        args "alfaSpecifications", "-o", "${buildDir}/alfa/domain/xacmlSpecifications"
        classpath = project.configurations.alfac
    }

    group = "axiomatics"
    mainClass = "com.axiomatics.alfa.cli.Main"
    jvmArgs "--illegal-access=permit"
    doLast {
        myErrOut.flush()
    }
}

task compileAlfaToPackage(type: JavaExec) {
    doFirst {

        def dir = "${projectDir}/${project.extensions.alfa.srcDir}"
        if (!new File(dir).isDirectory()) {
            throw new GradleException("alfa.srcDir is not set or does not exist: ${dir}")
        }
        myErrOut = new MyLogger();
        errorOutput myErrOut
        workingDir dir
        args "alfaSpecifications",
                '-p', "${buildDir}/alfa/domain/package/policy_package.zip",
                '-m', "${project.extensions.alfa.mainpolicy}"
    }

    mainClass = "com.axiomatics.alfa.cli.Main"
    group = "axiomatics"
    classpath = project.configurations.alfac
    jvmArgs "--illegal-access=permit"
    doLast {
        println myErrOut.flush()
    }
}

task buildAuthzDomain(type: JavaExec) {
    outputs.files fileTree("${buildDir}/alfa/domain/ads")
    doFirst {
        def mainPolicy = inputs.properties.mainPolicy
        def srcDir = inputs.properties.srcDir
        def xmlPolicies = inputs.properties.xmlPolicies
        args 'domain',
                '--input', srcDir,
                '--main-policy-id', prefix + mainPolicy,
                "--xacml-specifications=${xmlPolicies}",
                '--output', "${buildDir}/alfa/domain/ads/domain.yaml"
    }
    group = "axiomatics"
    classpath = project.configurations.domTool
    mainClass = "com.axiomatics.domtool.cli.DomTool"
}

task prepareDirs {
    mkdir "${buildDir}/alfa/domain/package"
    mkdir "${buildDir}/alfa/domain/ads"
}
task stageDeploymentDescriptor(type: Copy) {
    into "${buildDir}/alfa/domain/ads/"
}

task stageLicenseFile {
    doFirst {
        def srcFile = inputs.properties.srcFile
        if (srcFile == null)  throw new GradleException("Specify alfa.licenseFile");
        if (! new File(srcFile).canRead())  throw new GradleException("Can not read license file at ${srcFile}");
    }
    doLast {
        boolean ok = project.copy {
            from inputs.properties.srcFile
            into inputs.properties.dstDir
        }.didWork
        if (!didWork)  throw new GradleException("could not copy license file ${srcFile}");
    }
}

task runAds(type: JavaExec) {
    doFirst {
        myErrOut = new MyLogger();
        errorOutput myErrOut
        environment "LICENSE", project.tasks.stageLicenseFile.inputs.properties.filename
    }
    group = "axiomatics"
    classpath = project.configurations.ads
    workingDir "${buildDir}/alfa/domain/ads/"
    mainClass = "com.axiomatics.ads.App"
    ignoreExitValue true
    args 'server', "deployment.yaml"
    doLast {
        println myErrOut.flush()
    }
}


buildAuthzDomain.dependsOn compileAlfa
runAds.dependsOn buildAuthzDomain
runAds.dependsOn stageDeploymentDescriptor
runAds.dependsOn stageLicenseFile

rootProject.plugins.apply(AlfaPlugin)

class AlfaExtension {
    String mainpolicy = null
    String deploymentDescriptor = "deployment.yaml"
    String srcDir = "src/authorizationDomain"
    String licenseFile = null
}

class AlfaPlugin implements Plugin<Project> {
    void apply(Project project) {
        def accessKey = System.env.AXIOMATICS_ACCESS_KEY_ID ?: project.findProperty('AXIOMATICS_ACCESS_KEY_ID')
        def secretKey = System.env.AXIOMATICS_SECRET_ACCESS_KEY ?: project.findProperty('AXIOMATICS_SECRET_ACCESS_KEY')
        if (
                accessKey.equals("Put the key id provided by Axiomatics here!") ||
                        secretKey.equals("Put the secret key provided by Axiomatics here!")
        ) {
            throw new GradleException("Credential to Axiomatics repository not set. Please set credentials provided by Axiomatics in file gradle.properties or as environment variables.")
        }
        project.extensions.create('alfa', AlfaExtension)
        project.plugins.apply('java')
        project.afterEvaluate {
            def srcFile = "${it.rootDir}/${project.extensions.alfa.deploymentDescriptor}"
            if (! new File(srcFile).exists()) {
                throw new GradleException("alfa.deploymentdescriptor does not exist: ${srcFile}")
            }
            project.tasks.stageDeploymentDescriptor {
                from srcFile
            }
            project.sourceSets.main.java.srcDirs += ['src/authorizationDomain']
            project.tasks.withType(Test) {
                outputs.upToDateWhen {false}
                environment "ALFA_TEST_REMOTE_MAIN_POLICY" , "${project.extensions.alfa.mainpolicy}"
                testLogging {
                    events TestLogEvent.FAILED,
                            TestLogEvent.SKIPPED,
                            TestLogEvent.PASSED,
                            TestLogEvent.STANDARD_ERROR,
                            TestLogEvent.STANDARD_OUT
                    exceptionFormat TestExceptionFormat.FULL
                    showCauses true
                    showExceptions true
                    showStackTraces true
                    showStandardStreams false
                }
            }
            project.tasks.compileAlfa {
                inputs.property("srcDir",project.extensions.alfa.srcDir )
                inputs.files project.fileTree(project.extensions.alfa.srcDir).matching {include "**/*.alfa"}
            }
            project.tasks.buildAuthzDomain {
                inputs.property("mainPolicy", project.extensions.alfa.mainpolicy )
                inputs.property("srcDir",project.extensions.alfa.srcDir )
                inputs.property("xmlPolicies", "${project.buildDir}/alfa/domain/xacmlSpecifications" )
                inputs.files project.fileTree(project.extensions.alfa.srcDir)
                inputs.files project.fileTree("${project.buildDir}/alfa/domain/xacmlSpecifications")
            }
            project.tasks.stageLicenseFile {
                def ilicenseFile = project.extensions.alfa.licenseFile
                def filename = new File(ilicenseFile).getName()
                def idstDir = "${project.buildDir}/alfa/domain/ads/"
                inputs.property("srcFile", ilicenseFile)
                inputs.property("filename", filename)
                inputs.property("dstDir", idstDir)
                inputs.files project.file(ilicenseFile)
                outputs.files project.file("${idstDir}/${filename}")

            }
        } //after evaluate
    }
}

class MyLogger extends ByteArrayOutputStream {

    @Override
    public void flush() {
        println this.toString().replaceAll("WARNING", "warn")
        reset();
    }
}


